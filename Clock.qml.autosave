import QtQuick 2.15
import QtQuick.Window 2.15

Item {
    id: root

    Rectangle {
        id: clockFace
        width: 500
        height: 500
        color: "white"
        border.color: "black"
        border.width: 30
        radius: width / 2
        anchors.centerIn: parent

        // Hour Markers
        Repeater {
            model: 12 // One for each hour
            delegate: Rectangle {
                width: 4
                height: 16
                color: "black"
                anchors.top: parent.top
                anchors.topMargin: 30
                anchors.horizontalCenter: clockFace.horizontalCenter
                transform: Rotation {
                    origin.y: clockFace.radius - 30
                    origin.x: +2
                    angle: index * 30 // 360 / 12 = 30 degrees per hour
                }
            }
        }

        Repeater {
            model: 60 // One for each minute
            delegate: Rectangle {
                width: 2  // Thinner than hour markers
                height: 12  // Shorter than hour markers
                color: "black"
                visible: (index % 5 !== 0) // Hide every 5th line
                anchors.top: parent.top
                anchors.topMargin: 30
                anchors.horizontalCenter: parent.horizontalCenter
                transform: Rotation {
                    origin.y: clockFace.radius - 30
                    origin.x: +2
                    angle: index * 6 // 360 / 60 = 6 degrees per minute
                }
            }
        }

        // Hour hand
        Rectangle {
            id: hourHand
            width: 15
            height: clockFace.height / 4
            color: "black"
            anchors.bottom: clockFace.verticalCenter
            anchors.horizontalCenter: clockFace.horizontalCenter
            transformOrigin: Item.Bottom

            Rectangle {
                width: 80
                height: 88
                color: "transparent"
                anchors.horizontalCenter: parent.horizontalCenter
                anchors.bottom: parent.top
                anchors.bottomMargin: 11
                radius: width / 2

                // Dashed line coming down the middle
                Repeater {
                    model: 10 // Adjust the number of dashes
                    Rectangle {
                        width: 2 // Adjust the width of each dash
                        height: 6 // Adjust the height of each dash
                        color: "grey" // Adjust the color of the dashes
                        opacity: 0.5
                        x: parent.width / 2 - width / 2
                        y: height * index * 1.7 // Spacing between dashes
                        transformOrigin: Item.TopLeft
                    }
                }

                Repeater {
                    model: 30 // Adjust the number of dashes
                    Rectangle {
                        width: 2 // Adjust the width of each dash
                        height: 6 // Adjust the height of each dash
                        color: "grey" // Adjust the color of the dashes
                        opacity: 0.5
                        x: parent.width / 2 + (parent.width / 2 - width) * Math.cos(index * 15 * Math.PI / 180)
                        y: parent.height / 2 + (parent.height / 2 - height) * Math.sin(index * 15 * Math.PI / 180)
                        transformOrigin: Item.TopLeft
                        rotation: index * 15 // Adjust the rotation angle
                    }
                }

                MouseArea {
                    anchors.fill: parent

                    property real hourCoordinateX: 0
                    property real initialRotation: 0

                    onPressed: {
                        hourCoordinateX = mouseX
                        initialRotation = hourHand.rotation
                    }

                    onPositionChanged: {
                        let deltaX = mouseX - hourCoordinateX;
                        if (deltaX !== 0) {
                            hourHand.rotation = initialRotation + deltaX / 4; // Adjust the divisor to control the rotation sensitivity
                            minuteHand.rotation = hourHand.rotation * 12; // Update minute hand rotation based on hour hand rotation
                        }
                    }
                }
            }
        }

        // Minute hand
        Rectangle {
            id: minuteHand
            width: 15
            height: clockFace.height / 2.4 - 4
            color: "black"
            anchors.bottom: clockFace.verticalCenter
            anchors.horizontalCenter: clockFace.horizontalCenter
            transformOrigin: Item.Bottom

            Rectangle {
                width: 80
                height: 88
                color: "transparent"
                anchors.horizontalCenter: parent.horizontalCenter
                anchors.bottom: parent.top
                anchors.bottomMargin: -70
                radius: width / 2

                Repeater {
                    model: 30 // Adjust the number of dashes
                    Rectangle {
                        width: 2 // Adjust the width of each dash
                        height: 6 // Adjust the height of each dash
                        color: "grey" // Adjust the color of the dashes
                        opacity: 0.5
                        x: parent.width / 2 + (parent.width / 2 - width) * Math.cos(index * 15 * Math.PI / 180)
                        y: parent.height / 2 + (parent.height / 2 - height) * Math.sin(index * 15 * Math.PI / 180)
                        transformOrigin: Item.TopLeft
                        rotation: index * 15 // Adjust the rotation angle
                    }
                }

                MouseArea {
                    anchors.fill: parent

                    property real minuteCoordinateX: 0
                    property real initialRotation: 0

                    onPressed: {
                        minuteCoordinateX = mouseX
                        initialRotation = minuteHand.rotation
                    }

                    onPositionChanged: {
                        let deltaX = mouseX - minuteCoordinateX;
                        if (deltaX !== 0) {
                            minuteHand.rotation = initialRotation + deltaX / 4; // Adjust the divisor to control the rotation sensitivity
                            hourHand.rotation = minuteHand.rotation / 12; // Update hour hand rotation based on minute hand rotation
                        }
                    }
                }
            }
        }

        // Second hand
        Rectangle {
            id: secondHand
            width: 2
            height: clockFace.height / 2.5
            color: "red"
            anchors.bottom: clockFace.verticalCenter
            anchors.horizontalCenter: clockFace.horizontalCenter
            transformOrigin: Item.Bottom
        }


    }
}
